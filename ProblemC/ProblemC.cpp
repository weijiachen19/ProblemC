#include"define.h"
#include "tool.h"
int main()
{
	//加载海底深度
	vector<vector<int> > depth(25, vector<int>(25)); //二维数组的行数为11，列数为21。<int>后一定要加一个空格，否则会被判别为操作符>>出错
	int b[25][25] = 
	{ 
		{	28	,	27	,	32	,	31	,	29	,	26	,	28	,	29	,	32	,	31	,	34	,	35	,	38	,	36	,	35	,	39	,	40	,	42	,	41	,	42	,	43	}	,
		{	32	,	29	,	32	,	33	,	28	,	27	,	32	,	32	,	33	,	32	,	35	,	37	,	41	,	40	,	38	,	42	,	39	,	43	,	45	,	45	,	46	}	,
		{	35	,	34	,	36	,	37	,	34	,	32	,	36	,	35	,	37	,	38	,	38	,	40	,	43	,	44	,	42	,	44	,	43	,	44	,	48	,	49	,	50	}	,
		{	36	,	37	,	38	,	39	,	37	,	36	,	40	,	38	,	40	,	42	,	41	,	41	,	41	,	40	,	43	,	46	,	47	,	46	,	50	,	51	,	55	}	,
		{	38	,	39	,	41	,	40	,	41	,	40	,	44	,	42	,	44	,	47	,	44	,	39	,	35	,	36	,	44	,	47	,	49	,	48	,	52	,	54	,	58	}	,
		{	37	,	40	,	40	,	42	,	42	,	44	,	47	,	45	,	47	,	46	,	43	,	38	,	37	,	35	,	42	,	46	,	48	,	50	,	55	,	58	,	62	}	,
		{	36	,	39	,	42	,	44	,	46	,	48	,	49	,	46	,	48	,	45	,	43	,	38	,	36	,	38	,	46	,	48	,	50	,	52	,	56	,	62	,	60	}	,
		{	38	,	37	,	40	,	41	,	43	,	44	,	45	,	42	,	44	,	44	,	41	,	41	,	38	,	37	,	53	,	46	,	47	,	48	,	54	,	57	,	56	}	,
		{	34	,	33	,	38	,	38	,	40	,	40	,	42	,	38	,	41	,	42	,	38	,	40	,	37	,	36	,	48	,	43	,	44	,	46	,	51	,	53	,	54	}	,
		{	30	,	32	,	34	,	35	,	36	,	38	,	36	,	37	,	38	,	38	,	37	,	38	,	39	,	38	,	45	,	40	,	42	,	43	,	47	,	49	,	50	}	,
		{	26	,	30	,	27	,	32	,	35	,	34	,	33	,	36	,	35	,	34	,	36	,	38	,	40	,	37	,	35	,	38	,	39	,	40	,	44	,	47	,	50	}	,
	};
	for (int i = 0; i < 22; i++) 
	{
		for (int j = 0; j < 22; j++) 
		{
			depth[i][j] = b[i][j];
		}
	}
	
	//加载海底类型BottomType
	vector<vector<int> > bottomType(25, vector<int>(25)); //二维数组的行数为11，列数为21。<int>后一定要加一个空格，否则会被判别为操作符>>出错
	int a[25][25] =    //1石    2沙      3泥
	{
		{	3	,	3	,	3	,	3	,	3	,	3	,	3	,	2	,	2	,	2	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	},
		{	3	,	3	,	3	,	3	,	3	,	2	,	2	,	2	,	2	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	},
		{	3	,	3	,	3	,	2	,	2	,	2	,	2	,	2	,	2	,	2	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	},
		{	3	,	3	,	2	,	2	,	2	,	2	,	2	,	2	,	2	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	},
		{	3	,	2	,	2	,	2	,	2	,	2	,	2	,	2	,	2	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	},
		{	2	,	2	,	2	,	2	,	2	,	2	,	2	,	2	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	},
		{	2	,	2	,	2	,	2	,	2	,	2	,	2	,	2	,	2	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	},
		{	2	,	2	,	2	,	2	,	2	,	2	,	2	,	2	,	2	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	},
		{	2	,	2	,	2	,	2	,	2	,	2	,	2	,	2	,	2	,	2	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	},
		{	3	,	3	,	2	,	2	,	2	,	2	,	2	,	2	,	2	,	2	,	2	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	},
		{	3	,	3	,	3	,	3	,	2	,	2	,	2	,	2	,	2	,	2	,	2	,	2	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	,	1	},
	};
	for (int i = 0; i < 22; i++)
	{
		for (int j = 0; j < 22; j++)
		{
			bottomType[i][j] = a[i][j];
		}
	}

	//随机生成52个水雷
	Mine mineColl[52];
	for(int i=0;i<52;++i)
	{
		//随机变量
		int type = IntRand(1, 2);
		double lie = DoubleRand(0, 2000);
		double hang = DoubleRand(0, 1000);
		int sensorTime = IntRand(1, 4);


		//根据水雷类型的不同，修改成员变量，
		if (type == 1)
		{
			int h = hang / 100;
			int l = lie / 100;
			int z = depth[h][l];
			mineColl[i] = ChendiMine(hang, lie, z);

			//再分支随机生成传感器引信次数，直接修改成员变量
			mineColl[i].j = sensorTime;
		}
		else
		{
			mineColl[i] = MaoMine(hang, lie, 18);

			//再分支随机生成传感器引信次数，直接修改成员变量
			mineColl[i].j = sensorTime;
		}

		//测试
		cout << mineColl[i].weight << endl;
	}
	//以上是随机生成水雷，完美收工



	//依照舰船毁伤期望的描述，计算目标函数


}
//k = 1.2    //反射系数
//w = 1000;   //装药量
//h = 50;     //水深 
//SF = 0.4256 * k * w * *0.5 / h;      //冲击因子
//r = (0.4256 * k * w * *0.5 + (0.4256 * *2 * k * w * *0.5 + 3.4048 * SF * h * k * w * *0.5) * *0.5) / (4 * SF);   //毁伤半径